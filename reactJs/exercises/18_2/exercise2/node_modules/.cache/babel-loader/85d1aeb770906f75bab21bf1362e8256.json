{"ast":null,"code":"var _jsxFileName = \"/home/jafet/curso-Trybe/reactJs/exercises/18_2/exercise2/src/Providers/Provider.js\";\nimport React, { createContext, useState, useEffect } from 'react';\nconst TodoListContext = createContext();\nTodoListContext.displayName = 'TodoList';\n\nconst TodoProvider = ({\n  children\n}) => {\n  const [disabledBtn, setDisabledBtn] = useState(true);\n  const [textTodo, setTextTodo] = useState('');\n  const [selectedItem, setSelectedItem] = useState('');\n  const [list, setList] = useState([]);\n  useEffect(() => {\n    disableBtn();\n  }, [list]);\n\n  const disableBtn = () => {\n    if (list.length > 0) {\n      return setDisabledBtn(false);\n    }\n\n    ;\n    return setDisabledBtn(true);\n  };\n\n  const changeTextTodo = value => {\n    setTextTodo(value);\n  };\n\n  const selectedItemFunc = value => {\n    setSelectedItem(value);\n  };\n\n  const addItem = textTodo => {\n    const newArr = [...list, textTodo];\n    setList(newArr);\n    setTextTodo('');\n    setDisabledBtn(false);\n  };\n\n  const removeItem = () => {\n    const index = list.findIndex(e => e === selectedItem);\n    const arrCopied = [...list];\n    arrCopied.splice(index, 1);\n    console.log(arrCopied);\n    setList(arrCopied);\n    console.log(list); // disableBtn()\n  };\n\n  const contextObj = {\n    disabledBtn,\n    addItem,\n    removeItem,\n    selectedItemFunc,\n    changeTextTodo,\n    textTodo,\n    list,\n    selectedItem\n  };\n  return /*#__PURE__*/React.createElement(TodoListContext.Provider, {\n    value: contextObj,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, children);\n};\n\nexport { TodoProvider, TodoListContext };","map":{"version":3,"sources":["/home/jafet/curso-Trybe/reactJs/exercises/18_2/exercise2/src/Providers/Provider.js"],"names":["React","createContext","useState","useEffect","TodoListContext","displayName","TodoProvider","children","disabledBtn","setDisabledBtn","textTodo","setTextTodo","selectedItem","setSelectedItem","list","setList","disableBtn","length","changeTextTodo","value","selectedItemFunc","addItem","newArr","removeItem","index","findIndex","e","arrCopied","splice","console","log","contextObj"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,EAAyCC,SAAzC,QAA0D,OAA1D;AAEA,MAAMC,eAAe,GAAGH,aAAa,EAArC;AACAG,eAAe,CAACC,WAAhB,GAA8B,UAA9B;;AAEA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAErC,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCP,QAAQ,CAAC,IAAD,CAA9C;AACA,QAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACU,YAAD,EAAeC,eAAf,IAAkCX,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACY,IAAD,EAAOC,OAAP,IAAkBb,QAAQ,CAAC,EAAD,CAAhC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,UAAU;AACX,GAFQ,EAEN,CAACF,IAAD,CAFM,CAAT;;AAIA,QAAME,UAAU,GAAG,MAAM;AACvB,QAAIF,IAAI,CAACG,MAAL,GAAc,CAAlB,EAAqB;AACnB,aAAOR,cAAc,CAAC,KAAD,CAArB;AACD;;AAAA;AACD,WAAOA,cAAc,CAAC,IAAD,CAArB;AACD,GALD;;AAOA,QAAMS,cAAc,GAAIC,KAAD,IAAW;AAChCR,IAAAA,WAAW,CAACQ,KAAD,CAAX;AACD,GAFD;;AAIA,QAAMC,gBAAgB,GAAID,KAAD,IAAW;AAClCN,IAAAA,eAAe,CAACM,KAAD,CAAf;AACD,GAFD;;AAIA,QAAME,OAAO,GAAIX,QAAD,IAAc;AAC5B,UAAMY,MAAM,GAAG,CAAC,GAAGR,IAAJ,EAAUJ,QAAV,CAAf;AACAK,IAAAA,OAAO,CAACO,MAAD,CAAP;AACAX,IAAAA,WAAW,CAAC,EAAD,CAAX;AACAF,IAAAA,cAAc,CAAC,KAAD,CAAd;AACD,GALD;;AAOA,QAAMc,UAAU,GAAG,MAAM;AACvB,UAAMC,KAAK,GAAGV,IAAI,CAACW,SAAL,CAAgBC,CAAD,IAAOA,CAAC,KAAKd,YAA5B,CAAd;AACA,UAAMe,SAAS,GAAG,CAAC,GAAGb,IAAJ,CAAlB;AACAa,IAAAA,SAAS,CAACC,MAAV,CAAiBJ,KAAjB,EAAwB,CAAxB;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAYH,SAAZ;AACAZ,IAAAA,OAAO,CAACY,SAAD,CAAP;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYhB,IAAZ,EANuB,CAOvB;AACD,GARD;;AAWA,QAAMiB,UAAU,GAAG;AACjBvB,IAAAA,WADiB;AAEjBa,IAAAA,OAFiB;AAGjBE,IAAAA,UAHiB;AAIjBH,IAAAA,gBAJiB;AAKjBF,IAAAA,cALiB;AAMjBR,IAAAA,QANiB;AAOjBI,IAAAA,IAPiB;AAQjBF,IAAAA;AARiB,GAAnB;AAWA,sBACE,oBAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAEmB,UAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGxB,QADH,CADF;AAKD,CA5DD;;AA8DA,SAASD,YAAT,EAAuBF,eAAvB","sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\n\nconst TodoListContext = createContext();\nTodoListContext.displayName = 'TodoList';\n\nconst TodoProvider = ({ children }) => {\n\n  const [disabledBtn, setDisabledBtn] = useState(true);\n  const [textTodo, setTextTodo] = useState('');\n  const [selectedItem, setSelectedItem] = useState('');\n  const [list, setList] = useState([]);\n\n  useEffect(() => {\n    disableBtn()\n  }, [list])\n\n  const disableBtn = () => {\n    if (list.length > 0) {\n      return setDisabledBtn(false);\n    };\n    return setDisabledBtn(true);\n  };\n\n  const changeTextTodo = (value) => {\n    setTextTodo(value);\n  };\n\n  const selectedItemFunc = (value) => {\n    setSelectedItem(value);\n  };\n\n  const addItem = (textTodo) => {\n    const newArr = [...list, textTodo];\n    setList(newArr)\n    setTextTodo('');\n    setDisabledBtn(false);    \n  };\n\n  const removeItem = () => {\n    const index = list.findIndex((e) => e === selectedItem);\n    const arrCopied = [...list];\n    arrCopied.splice(index, 1);\n    console.log(arrCopied)\n    setList(arrCopied)\n    console.log(list)\n    // disableBtn()\n  };\n\n  \n  const contextObj = {\n    disabledBtn,\n    addItem,\n    removeItem,\n    selectedItemFunc,\n    changeTextTodo,\n    textTodo,\n    list,\n    selectedItem,\n  }\n\n  return (\n    <TodoListContext.Provider value={contextObj}>\n      {children}\n    </TodoListContext.Provider>\n  )\n}\n\nexport { TodoProvider, TodoListContext };\n"]},"metadata":{},"sourceType":"module"}