{"ast":null,"code":"var _jsxFileName = \"/home/jafet/projetos/sd-03-project-starwars-datatable-hooks/src/provider/SWApiProvider.js\";\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport SWApiContext from '../context/SWApiContext';\nimport apiSWRequest from '../service/apiSWRequest';\n\nconst SWApiProvider = ({\n  children\n}) => {\n  const [data, setData] = useState([]);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    const apiSWRequestFunction = () => {\n      setIsLoading(true);\n      apiSWRequest().then(apiRequestSucceed, apiRequestFailure);\n    };\n\n    apiSWRequestFunction();\n  }, []);\n\n  const apiRequestSucceed = ({\n    results\n  }) => {\n    setData(results);\n    setIsLoading(false);\n  };\n\n  const apiRequestFailure = ({\n    message\n  }) => {\n    setErrorMessage(message);\n    setIsLoading(false);\n  };\n\n  const apiSwContext = {\n    data,\n    isLoading,\n    errorMessage\n  };\n  return /*#__PURE__*/React.createElement(SWApiContext.Provider, {\n    value: apiSwContext,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, children);\n};\n\nexport default SWApiProvider;\nSWApiProvider.propTypes = {\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]).isRequired\n};","map":{"version":3,"sources":["/home/jafet/projetos/sd-03-project-starwars-datatable-hooks/src/provider/SWApiProvider.js"],"names":["React","useState","useEffect","PropTypes","SWApiContext","apiSWRequest","SWApiProvider","children","data","setData","errorMessage","setErrorMessage","isLoading","setIsLoading","apiSWRequestFunction","then","apiRequestSucceed","apiRequestFailure","results","message","apiSwContext","propTypes","oneOfType","arrayOf","node","isRequired"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,OAAOC,YAAP,MAAyB,yBAAzB;;AAEA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACtC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACS,YAAD,EAAeC,eAAf,IAAkCV,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACW,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC,IAAD,CAA1C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMY,oBAAoB,GAAG,MAAM;AACjCD,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACAR,MAAAA,YAAY,GACTU,IADH,CACQC,iBADR,EAC2BC,iBAD3B;AAED,KAJD;;AAKAH,IAAAA,oBAAoB;AACrB,GAPQ,EAON,EAPM,CAAT;;AASA,QAAME,iBAAiB,GAAG,CAAC;AAAEE,IAAAA;AAAF,GAAD,KAAiB;AACzCT,IAAAA,OAAO,CAACS,OAAD,CAAP;AACAL,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GAHD;;AAKA,QAAMI,iBAAiB,GAAG,CAAC;AAAEE,IAAAA;AAAF,GAAD,KAAiB;AACzCR,IAAAA,eAAe,CAACQ,OAAD,CAAf;AACAN,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GAHD;;AAKA,QAAMO,YAAY,GAAG;AACnBZ,IAAAA,IADmB;AAEnBI,IAAAA,SAFmB;AAGnBF,IAAAA;AAHmB,GAArB;AAMA,sBACE,oBAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAEU,YAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGb,QADH,CADF;AAKD,CAnCD;;AAqCA,eAAeD,aAAf;AAEAA,aAAa,CAACe,SAAd,GAA0B;AACxBd,EAAAA,QAAQ,EAAEJ,SAAS,CAACmB,SAAV,CAAoB,CAC5BnB,SAAS,CAACoB,OAAV,CAAkBpB,SAAS,CAACqB,IAA5B,CAD4B,EAE5BrB,SAAS,CAACqB,IAFkB,CAApB,EAGPC;AAJqB,CAA1B","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport SWApiContext from '../context/SWApiContext';\nimport apiSWRequest from '../service/apiSWRequest';\n\nconst SWApiProvider = ({ children }) => {\n  const [data, setData] = useState([]);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const apiSWRequestFunction = () => {\n      setIsLoading(true);\n      apiSWRequest()\n        .then(apiRequestSucceed, apiRequestFailure);\n    };\n    apiSWRequestFunction();\n  }, []);\n\n  const apiRequestSucceed = ({ results }) => {\n    setData(results);\n    setIsLoading(false);\n  };\n\n  const apiRequestFailure = ({ message }) => {\n    setErrorMessage(message);\n    setIsLoading(false);\n  };\n\n  const apiSwContext = {\n    data,\n    isLoading,\n    errorMessage,\n  };\n\n  return (\n    <SWApiContext.Provider value={apiSwContext}>\n      {children}\n    </SWApiContext.Provider>\n  );\n};\n\nexport default SWApiProvider;\n\nSWApiProvider.propTypes = {\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node,\n  ]).isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}