{"ast":null,"code":"import { fetchRecipesByIngredient, fetchRecipesByName, fetchRecipesByFirstLetter } from '../../services/searchBarAPI';\nconst search = {\n  ingredients: fetchRecipesByIngredient,\n  name: fetchRecipesByName,\n  firstLetter: fetchRecipesByFirstLetter\n};\n\nconst pushRoute = (history, type, data) => {\n  if (type === 'meal' && data.meals.length === 1) {\n    history.push(`/comidas/${data.meals[0].idMeal}`);\n  }\n\n  if (type === 'cocktail' && data.drinks.length === 1) {\n    history.push(`/bebidas/${data.drinks[0].idDrink}`);\n  }\n};\n\nconst performSearch = async (history, type, setIsFetching, setData, searchParam, searchName) => {\n  const data = await search[searchParam](searchName, type);\n  console.log(data);\n  setData(data.meals || data.drinks);\n  setIsFetching(false);\n  if (data.length === 0) alert('Sinto muito, não encontramos nenhuma receita para esses filtros.');\n  pushRoute(history, type, data);\n};\n\nconst searchButton = async (history, type, setIsFetching, setData, searchParam, searchName) => {\n  if (searchParam === 'firstLetter' && searchName.length !== 1) {\n    alert('Sua busca deve conter somente 1 (um) caracter');\n  } else {\n    performSearch(history, type, setIsFetching, setData, searchParam, searchName);\n  }\n};\n\nexport default searchButton;","map":{"version":3,"sources":["/home/jafet/projetos/sd-03-recipes-app-03/src/components/HeaderSearchBar/searchButtonFunction.js"],"names":["fetchRecipesByIngredient","fetchRecipesByName","fetchRecipesByFirstLetter","search","ingredients","name","firstLetter","pushRoute","history","type","data","meals","length","push","idMeal","drinks","idDrink","performSearch","setIsFetching","setData","searchParam","searchName","console","log","alert","searchButton"],"mappings":"AAAA,SAASA,wBAAT,EAAmCC,kBAAnC,EAAuDC,yBAAvD,QAAwF,6BAAxF;AAEA,MAAMC,MAAM,GAAG;AACbC,EAAAA,WAAW,EAAEJ,wBADA;AAEbK,EAAAA,IAAI,EAAEJ,kBAFO;AAGbK,EAAAA,WAAW,EAAEJ;AAHA,CAAf;;AAMA,MAAMK,SAAS,GAAG,CAACC,OAAD,EAAUC,IAAV,EAAgBC,IAAhB,KAAyB;AACzC,MAAID,IAAI,KAAK,MAAT,IAAmBC,IAAI,CAACC,KAAL,CAAWC,MAAX,KAAsB,CAA7C,EAAgD;AAC9CJ,IAAAA,OAAO,CAACK,IAAR,CAAc,YAAWH,IAAI,CAACC,KAAL,CAAW,CAAX,EAAcG,MAAO,EAA9C;AACD;;AACD,MAAIL,IAAI,KAAK,UAAT,IAAuBC,IAAI,CAACK,MAAL,CAAYH,MAAZ,KAAuB,CAAlD,EAAqD;AACnDJ,IAAAA,OAAO,CAACK,IAAR,CAAc,YAAWH,IAAI,CAACK,MAAL,CAAY,CAAZ,EAAeC,OAAQ,EAAhD;AACD;AACF,CAPD;;AASA,MAAMC,aAAa,GAAG,OACpBT,OADoB,EAEpBC,IAFoB,EAGpBS,aAHoB,EAIpBC,OAJoB,EAKpBC,WALoB,EAMpBC,UANoB,KAOjB;AACH,QAAMX,IAAI,GAAG,MAAMP,MAAM,CAACiB,WAAD,CAAN,CAAoBC,UAApB,EAAgCZ,IAAhC,CAAnB;AACAa,EAAAA,OAAO,CAACC,GAAR,CAAYb,IAAZ;AACAS,EAAAA,OAAO,CAACT,IAAI,CAACC,KAAL,IAAcD,IAAI,CAACK,MAApB,CAAP;AACAG,EAAAA,aAAa,CAAC,KAAD,CAAb;AACA,MAAIR,IAAI,CAACE,MAAL,KAAgB,CAApB,EAAuBY,KAAK,CAAC,kEAAD,CAAL;AACvBjB,EAAAA,SAAS,CAACC,OAAD,EAAUC,IAAV,EAAgBC,IAAhB,CAAT;AACD,CAdD;;AAgBA,MAAMe,YAAY,GAAG,OACjBjB,OADiB,EAEjBC,IAFiB,EAGjBS,aAHiB,EAIjBC,OAJiB,EAKjBC,WALiB,EAMjBC,UANiB,KAOd;AACL,MAAID,WAAW,KAAK,aAAhB,IAAiCC,UAAU,CAACT,MAAX,KAAsB,CAA3D,EAA8D;AAC5DY,IAAAA,KAAK,CAAC,+CAAD,CAAL;AACD,GAFD,MAEO;AACLP,IAAAA,aAAa,CACXT,OADW,EAEXC,IAFW,EAGXS,aAHW,EAIXC,OAJW,EAKXC,WALW,EAMXC,UANW,CAAb;AAQD;AACF,CApBD;;AAsBA,eAAeI,YAAf","sourcesContent":["import { fetchRecipesByIngredient, fetchRecipesByName, fetchRecipesByFirstLetter } from '../../services/searchBarAPI';\n\nconst search = {\n  ingredients: fetchRecipesByIngredient,\n  name: fetchRecipesByName,\n  firstLetter: fetchRecipesByFirstLetter,\n};\n\nconst pushRoute = (history, type, data) => {\n  if (type === 'meal' && data.meals.length === 1) {\n    history.push(`/comidas/${data.meals[0].idMeal}`);\n  }\n  if (type === 'cocktail' && data.drinks.length === 1) {\n    history.push(`/bebidas/${data.drinks[0].idDrink}`);\n  }\n};\n\nconst performSearch = async (\n  history,\n  type,\n  setIsFetching,\n  setData,\n  searchParam,\n  searchName,\n) => {\n  const data = await search[searchParam](searchName, type);\n  console.log(data)\n  setData(data.meals || data.drinks);\n  setIsFetching(false);\n  if (data.length === 0) alert('Sinto muito, não encontramos nenhuma receita para esses filtros.');\n  pushRoute(history, type, data);\n};\n\nconst searchButton = async (\n    history,\n    type,\n    setIsFetching,\n    setData,\n    searchParam,\n    searchName,\n  ) => {\n  if (searchParam === 'firstLetter' && searchName.length !== 1) {\n    alert('Sua busca deve conter somente 1 (um) caracter');\n  } else {\n    performSearch(\n      history,\n      type,\n      setIsFetching,\n      setData,\n      searchParam,\n      searchName,\n    );\n  }\n};\n\nexport default searchButton;\n"]},"metadata":{},"sourceType":"module"}