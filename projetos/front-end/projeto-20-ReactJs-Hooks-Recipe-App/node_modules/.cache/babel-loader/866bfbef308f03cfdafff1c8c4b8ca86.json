{"ast":null,"code":"var _jsxFileName = \"/home/jafet/projetos/sd-03-recipes-app-03/src/pages/RecipesInProgress/RecipesInProgressPage/IngredientsCheckbox.js\";\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport './IngredientsCheckbox.css';\n\nconst riskIngredient = (textDecorationState, setTextDecorationState) => {\n  if (textDecorationState === 'line-through') {\n    return setTextDecorationState('');\n  }\n\n  return setTextDecorationState('line-through');\n};\n\nconst localStorageProgress = (englishType, id, index) => {\n  const inProgress = JSON.parse(localStorage.getItem('inProgressRecipes'));\n\n  if (inProgress[englishType][id].some(e => e === index)) {\n    const newArr = [...inProgress[englishType][id]].filter(e => e !== index);\n    const inProgressRecipes = { ...inProgress,\n      [englishType]: { ...inProgress[englishType],\n        [id]: newArr\n      }\n    };\n    return localStorage.setItem('inProgressRecipes', JSON.stringify(inProgressRecipes));\n  }\n\n  const inProgressRecipes = { ...inProgress,\n    [englishType]: { ...inProgress[englishType],\n      [id]: [...inProgress[englishType][id], index]\n    }\n  };\n  return localStorage.setItem('inProgressRecipes', JSON.stringify(inProgressRecipes));\n};\n\nconst IngredientsCheckbox = props => {\n  const [textDecorationState, setTextDecorationState] = useState('');\n  const {\n    ingredient,\n    index,\n    quantity,\n    id,\n    finishButton,\n    englishType\n  } = props;\n  useEffect(() => {\n    if (JSON.parse(localStorage.getItem('inProgressRecipes')) && JSON.parse(localStorage.getItem('inProgressRecipes'))[englishType][id].some(e => e === index)) {\n      finishButton(englishType, id, index);\n      setTextDecorationState('line-through');\n    }\n  }, []);\n\n  const verifyCheck = () => {\n    if (JSON.parse(localStorage.getItem('inProgressRecipes'))[englishType][id].some(e => e === index)) {\n      return true;\n    }\n\n    return false;\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"checkbox-container\",\n    \"data-testid\": `${index}-ingredient-step`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"checkbox-igredients\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    \"data-testid\": \"label\",\n    style: {\n      textDecoration: textDecorationState\n    },\n    htmlFor: ingredient,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    \"data-testid\": `${index}-ingredient-test`,\n    type: \"checkbox\",\n    checked: verifyCheck(),\n    onChange: () => {\n      localStorageProgress(englishType, id, index);\n      riskIngredient(textDecorationState, setTextDecorationState);\n      finishButton();\n    },\n    id: ingredient,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 11\n    }\n  }), ingredient, \" - \", quantity)));\n};\n\nexport default IngredientsCheckbox;\nIngredientsCheckbox.propTypes = {\n  ingredient: PropTypes.string.isRequired,\n  index: PropTypes.number.isRequired,\n  quantity: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  finishButton: PropTypes.func.isRequired,\n  englishType: PropTypes.string.isRequired\n};","map":{"version":3,"sources":["/home/jafet/projetos/sd-03-recipes-app-03/src/pages/RecipesInProgress/RecipesInProgressPage/IngredientsCheckbox.js"],"names":["React","useState","useEffect","PropTypes","riskIngredient","textDecorationState","setTextDecorationState","localStorageProgress","englishType","id","index","inProgress","JSON","parse","localStorage","getItem","some","e","newArr","filter","inProgressRecipes","setItem","stringify","IngredientsCheckbox","props","ingredient","quantity","finishButton","verifyCheck","textDecoration","propTypes","string","isRequired","number","func"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport './IngredientsCheckbox.css';\n\nconst riskIngredient = (textDecorationState, setTextDecorationState) => {\n  if (textDecorationState === 'line-through') {\n    return setTextDecorationState('');\n  }\n  return setTextDecorationState('line-through');\n};\n\nconst localStorageProgress = (englishType, id, index) => {\n  const inProgress = JSON.parse(localStorage.getItem('inProgressRecipes'));\n  if (inProgress[englishType][id].some((e) => e === index)) {\n    const newArr = [...inProgress[englishType][id]].filter((e) => e !== index);\n    const inProgressRecipes = {\n      ...inProgress,\n      [englishType]: { ...inProgress[englishType], [id]: newArr },\n    };\n    return localStorage.setItem('inProgressRecipes', JSON.stringify(inProgressRecipes));\n  }\n  const inProgressRecipes = {\n    ...inProgress,\n    [englishType]: { ...inProgress[englishType], [id]: [...inProgress[englishType][id], index] },\n  };\n  return localStorage.setItem('inProgressRecipes', JSON.stringify(inProgressRecipes));\n};\n\nconst IngredientsCheckbox = (props) => {\n  const [textDecorationState, setTextDecorationState] = useState('');\n  const { ingredient, index, quantity, id, finishButton, englishType } = props;\n  useEffect(() => {\n    if (\n      JSON.parse(localStorage.getItem('inProgressRecipes')) &&\n      JSON.parse(localStorage.getItem('inProgressRecipes'))[englishType][id].some((e) => e === index)\n    ) {\n      finishButton(englishType, id, index);\n      setTextDecorationState('line-through');\n    }\n  }, []);\n\n  const verifyCheck = () => {\n    if (\n      JSON.parse(localStorage.getItem('inProgressRecipes'))[englishType][id].some((e) => e === index)\n    ) {\n      return true;\n    }\n    return false;\n  };\n\n  return (\n    <div className=\"checkbox-container\" data-testid={`${index}-ingredient-step`}>\n      <div className=\"checkbox-igredients\">\n        <label\n          data-testid=\"label\"\n          style={{ textDecoration: textDecorationState }}\n          htmlFor={ingredient}\n        >\n          <input\n            data-testid={`${index}-ingredient-test`}\n            type=\"checkbox\"\n            checked={verifyCheck()}\n            onChange={() => {\n              localStorageProgress(englishType, id, index);\n              riskIngredient(textDecorationState, setTextDecorationState);\n              finishButton();\n            }}\n            id={ingredient}\n          />\n          {ingredient} - {quantity}\n        </label>\n      </div>\n    </div>\n  );\n};\n\nexport default IngredientsCheckbox;\n\nIngredientsCheckbox.propTypes = {\n  ingredient: PropTypes.string.isRequired,\n  index: PropTypes.number.isRequired,\n  quantity: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  finishButton: PropTypes.func.isRequired,\n  englishType: PropTypes.string.isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}