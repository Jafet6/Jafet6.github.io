{"ast":null,"code":"var _jsxFileName = \"/home/jafet/projetos/sd-03-recipes-app-03/src/pages/ExplorerPages/ExplorerByIngredients.js\";\nimport React, { useEffect, useState, useContext } from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport FoodContext from '../FoodMainPage/Context/FoodContext';\nimport './Explorer.css';\nimport Footer from '../../components/Footer/Footer';\nimport { fetchIngredientsList, fetchByIngredients } from '../../services/theMealAPI';\nimport { fetchListDrinksIngredients } from '../../services/theCockTailAPI';\nimport Header from '../../components/Header/index';\nimport garfo from \"../../components/Recipes/RecipeCard/garfo.svg\";\nimport Loading from '../../components/Loading/Loading';\n\nconst fetchIngredients = async (pathname, setIngredients, setImgUrl, setNewRoute) => {\n  if (pathname === '/explorar/comidas/ingredientes') {\n    const dataMeals = await fetchIngredientsList();\n    setIngredients(dataMeals.meals);\n    setImgUrl('https://www.themealdb.com/images/ingredients/');\n    const newRoute = '/comidas';\n    setNewRoute(newRoute);\n  } else if (pathname === '/explorar/bebidas/ingredientes') {\n    const dataDrinks = await fetchListDrinksIngredients();\n    setIngredients(dataDrinks.drinks);\n    setImgUrl('https://www.thecocktaildb.com/images/ingredients/');\n    const newRoute = '/bebidas';\n    setNewRoute(newRoute);\n  }\n};\n\nconst handlerFetchIngredients = async (ingredient, lastRoute, setDataByIngredients) => {\n  if (lastRoute === '/comidas') {\n    const type = 'themealdb';\n    const dataIngredients = await fetchByIngredients(type, ingredient);\n    setDataByIngredients(dataIngredients);\n  } else {\n    const type = 'thecocktaildb';\n    const dataIngredients = await fetchByIngredients(type, ingredient);\n    setDataByIngredients(dataIngredients);\n  }\n};\n\nfunction renderCards(ingredients, imgUrl, newRoute, setDataByIngredients) {\n  console.log('INGREDIENTS ', ingredients);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"explorer-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }, ingredients.map((ele, index) => index < 12 && /*#__PURE__*/React.createElement(Link, {\n    to: `${newRoute}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    key: `${ele}-k`,\n    type: \"submit\",\n    \"data-testid\": `${index}-ingredient-card`,\n    className: \"card-container\",\n    onClick: () => handlerFetchIngredients(ele.strIngredient || ele.strIngredient1, newRoute, setDataByIngredients),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    className: \"thumbnail\",\n    \"data-testid\": `${index}-card-img`,\n    src: `${imgUrl}${ele.strIngredient || ele.strIngredient1}-Small.png`,\n    alt: `${ele.strIngredient || ele.strIngredient1}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    \"data-testid\": `${index}-card-name`,\n    className: 'card-text',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }, ele.strIngredient || ele.strIngredient1), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    className: \"recipe-iconTwo\",\n    src: garfo,\n    alt: 'garfo',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 15\n    }\n  }))))));\n}\n\nfunction ExplorerByIngredients() {\n  const [ingredients, setIngredients] = useState('');\n  const [newRoute, setNewRoute] = useState('');\n  const [imgUrl, setImgUrl] = useState('');\n  const {\n    dataByIngredients,\n    setDataByIngredients\n  } = useContext(FoodContext);\n  const {\n    pathname\n  } = useLocation();\n  useEffect(() => {\n    fetchIngredients(pathname, setIngredients, setImgUrl, setNewRoute);\n  }, []);\n  if (!ingredients) return /*#__PURE__*/React.createElement(Loading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 28\n    }\n  });\n  console.log('oqe tem', dataByIngredients);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    title: \"Explorar Ingredientes\",\n    searchIcon: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }), renderCards(ingredients, imgUrl, newRoute, setDataByIngredients), /*#__PURE__*/React.createElement(Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }));\n}\n\nExplorerByIngredients.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired\n  }).isRequired\n};\nexport default ExplorerByIngredients;","map":{"version":3,"sources":["/home/jafet/projetos/sd-03-recipes-app-03/src/pages/ExplorerPages/ExplorerByIngredients.js"],"names":["React","useEffect","useState","useContext","Link","useLocation","PropTypes","FoodContext","Footer","fetchIngredientsList","fetchByIngredients","fetchListDrinksIngredients","Header","Loading","fetchIngredients","pathname","setIngredients","setImgUrl","setNewRoute","dataMeals","meals","newRoute","dataDrinks","drinks","handlerFetchIngredients","ingredient","lastRoute","setDataByIngredients","type","dataIngredients","renderCards","ingredients","imgUrl","console","log","map","ele","index","strIngredient","strIngredient1","garfo","ExplorerByIngredients","dataByIngredients","propTypes","location","shape","string","isRequired"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport FoodContext from '../FoodMainPage/Context/FoodContext';\nimport './Explorer.css';\nimport Footer from '../../components/Footer/Footer';\nimport { fetchIngredientsList, fetchByIngredients } from '../../services/theMealAPI';\nimport { fetchListDrinksIngredients } from '../../services/theCockTailAPI';\nimport Header from '../../components/Header/index';\nimport garfo from '../../components/Recipes/RecipeCard/garfo.svg';\nimport Loading from '../../components/Loading/Loading';\n\nconst fetchIngredients = async (pathname, setIngredients, setImgUrl, setNewRoute) => {\n  if (pathname === '/explorar/comidas/ingredientes') {\n    const dataMeals = await fetchIngredientsList();\n    setIngredients(dataMeals.meals);\n    setImgUrl('https://www.themealdb.com/images/ingredients/');\n    const newRoute = '/comidas';\n    setNewRoute(newRoute);\n  } else if (pathname === '/explorar/bebidas/ingredientes') {\n    const dataDrinks = await fetchListDrinksIngredients();\n    setIngredients(dataDrinks.drinks);\n    setImgUrl('https://www.thecocktaildb.com/images/ingredients/');\n    const newRoute = '/bebidas';\n    setNewRoute(newRoute);\n  }\n};\n\nconst handlerFetchIngredients = async (ingredient, lastRoute, setDataByIngredients) => {\n  if (lastRoute === '/comidas') {\n    const type = 'themealdb';\n    const dataIngredients = await fetchByIngredients(type, ingredient);\n    setDataByIngredients(dataIngredients);\n  } else {\n    const type = 'thecocktaildb';\n    const dataIngredients = await fetchByIngredients(type, ingredient);\n    setDataByIngredients(dataIngredients);\n  }\n};\n\nfunction renderCards(ingredients, imgUrl, newRoute, setDataByIngredients) {\n  console.log('INGREDIENTS ', ingredients);\n  return (\n    <div className=\"explorer-container\">\n      {ingredients.map((ele, index) => (\n        index < 12 &&\n        <Link to={`${newRoute}`}>\n          <button\n            key={`${ele}-k`}\n            type=\"submit\"\n            data-testid={`${index}-ingredient-card`}\n            className=\"card-container\"\n            onClick={() => handlerFetchIngredients(ele.strIngredient ||\n              ele.strIngredient1, newRoute, setDataByIngredients)}\n          >\n            <img\n              className=\"thumbnail\"\n              data-testid={`${index}-card-img`}\n              src={`${imgUrl}${ele.strIngredient || ele.strIngredient1}-Small.png`}\n              alt={`${ele.strIngredient || ele.strIngredient1}`}\n            />\n            <span data-testid={`${index}-card-name`} className={'card-text'}>\n              {ele.strIngredient || ele.strIngredient1}\n            </span>\n            <div>\n              <img\n                className=\"recipe-iconTwo\"\n                src={garfo}\n                alt={'garfo'}\n              />\n            </div>\n          </button>\n        </Link>\n      ))}\n    </div>\n  );\n}\n\nfunction ExplorerByIngredients() {\n  const [ingredients, setIngredients] = useState('');\n  const [newRoute, setNewRoute] = useState('');\n  const [imgUrl, setImgUrl] = useState('');\n  const { dataByIngredients, setDataByIngredients } = useContext(FoodContext);\n  const { pathname } = useLocation();\n  useEffect(() => {\n    fetchIngredients(pathname, setIngredients, setImgUrl, setNewRoute);\n  }, []);\n\n  if (!ingredients) return <Loading />;\n\n  console.log('oqe tem', dataByIngredients);\n  return (\n    <div>\n      <Header title=\"Explorar Ingredientes\" searchIcon={false} />\n      {renderCards(ingredients, imgUrl, newRoute, setDataByIngredients)}\n      <Footer />\n    </div>\n  );\n}\n\nExplorerByIngredients.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default ExplorerByIngredients;\n"]},"metadata":{},"sourceType":"module"}