{"ast":null,"code":"var _jsxFileName = \"/home/jafet/projetos/sd-03-recipes-app-03/src/pages/FoodMainPage/Context/FoodProvider.js\";\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport FoodContext from './FoodContext';\nimport { fetchMeals } from '../../../services/theMealAPI';\nimport { fetchDrinks } from '../../../services/theCockTailAPI';\n\nconst FoodProvider = ({\n  children\n}) => {\n  const [dataBase, setDataBase] = useState({\n    drinks: [],\n    meals: []\n  });\n  const [mealsData, setMealsData] = useState([]);\n  const [drinksData, setDrinksData] = useState([]);\n  const [storage, setStorage] = useState([]);\n  const [dataByIngredients, setDataByIngredients] = useState([]);\n\n  const handleMealsSuccess = response => {\n    const {\n      meals\n    } = response;\n    setMealsData(meals);\n    setDataBase(currentState => ({ ...currentState,\n      meals\n    }));\n  };\n\n  const fetch12Meals = () => {\n    fetchMeals().then(handleMealsSuccess, e => e);\n  };\n\n  const handleDrinksSuccess = response => {\n    const {\n      drinks\n    } = response;\n    setDrinksData(drinks);\n    setDataBase(currentState => ({ ...currentState,\n      drinks\n    }));\n  };\n\n  const fetch12Drinks = () => {\n    fetchDrinks().then(handleDrinksSuccess, e => e);\n  };\n\n  const context = {\n    get12Meals: fetch12Meals,\n    get12Drinks: fetch12Drinks,\n    mealsData,\n    drinksData,\n    dataByIngredients,\n    setMealsData,\n    setDrinksData,\n    setDataByIngredients,\n    storage,\n    setStorage,\n    dataBase\n  };\n  return /*#__PURE__*/React.createElement(FoodContext.Provider, {\n    value: context,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, children);\n};\n\nFoodProvider.propTypes = {\n  children: PropTypes.node.isRequired\n};\nexport default FoodProvider;","map":{"version":3,"sources":["/home/jafet/projetos/sd-03-recipes-app-03/src/pages/FoodMainPage/Context/FoodProvider.js"],"names":["React","useState","PropTypes","FoodContext","fetchMeals","fetchDrinks","FoodProvider","children","dataBase","setDataBase","drinks","meals","mealsData","setMealsData","drinksData","setDrinksData","storage","setStorage","dataByIngredients","setDataByIngredients","handleMealsSuccess","response","currentState","fetch12Meals","then","e","handleDrinksSuccess","fetch12Drinks","context","get12Meals","get12Drinks","propTypes","node","isRequired"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAASC,UAAT,QAA2B,8BAA3B;AACA,SAASC,WAAT,QAA4B,kCAA5B;;AAEA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACrC,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC;AAAES,IAAAA,MAAM,EAAE,EAAV;AAAcC,IAAAA,KAAK,EAAE;AAArB,GAAD,CAAxC;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACa,UAAD,EAAaC,aAAb,IAA8Bd,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACe,OAAD,EAAUC,UAAV,IAAwBhB,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACiB,iBAAD,EAAoBC,oBAApB,IAA4ClB,QAAQ,CAAC,EAAD,CAA1D;;AAEA,QAAMmB,kBAAkB,GAAIC,QAAD,IAAc;AACvC,UAAM;AAAEV,MAAAA;AAAF,QAAYU,QAAlB;AACAR,IAAAA,YAAY,CAACF,KAAD,CAAZ;AACAF,IAAAA,WAAW,CAAEa,YAAD,KAAmB,EAAE,GAAGA,YAAL;AAAmBX,MAAAA;AAAnB,KAAnB,CAAD,CAAX;AACD,GAJD;;AAKA,QAAMY,YAAY,GAAG,MAAM;AACzBnB,IAAAA,UAAU,GACPoB,IADH,CACQJ,kBADR,EAC6BK,CAAD,IAAOA,CADnC;AAED,GAHD;;AAIA,QAAMC,mBAAmB,GAAIL,QAAD,IAAc;AACxC,UAAM;AAAEX,MAAAA;AAAF,QAAaW,QAAnB;AACAN,IAAAA,aAAa,CAACL,MAAD,CAAb;AACAD,IAAAA,WAAW,CAAEa,YAAD,KAAmB,EAAE,GAAGA,YAAL;AAAmBZ,MAAAA;AAAnB,KAAnB,CAAD,CAAX;AACD,GAJD;;AAKA,QAAMiB,aAAa,GAAG,MAAM;AAC1BtB,IAAAA,WAAW,GACRmB,IADH,CACQE,mBADR,EAC8BD,CAAD,IAAOA,CADpC;AAED,GAHD;;AAIA,QAAMG,OAAO,GAAG;AACdC,IAAAA,UAAU,EAAEN,YADE;AAEdO,IAAAA,WAAW,EAAEH,aAFC;AAGdf,IAAAA,SAHc;AAIdE,IAAAA,UAJc;AAKdI,IAAAA,iBALc;AAMdL,IAAAA,YANc;AAOdE,IAAAA,aAPc;AAQdI,IAAAA,oBARc;AASdH,IAAAA,OATc;AAUdC,IAAAA,UAVc;AAWdT,IAAAA;AAXc,GAAhB;AAaA,sBACE,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEoB,OAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGrB,QADH,CADF;AAKD,CA3CD;;AA6CAD,YAAY,CAACyB,SAAb,GAAyB;AAAExB,EAAAA,QAAQ,EAAEL,SAAS,CAAC8B,IAAV,CAAeC;AAA3B,CAAzB;AAEA,eAAe3B,YAAf","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport FoodContext from './FoodContext';\nimport { fetchMeals } from '../../../services/theMealAPI';\nimport { fetchDrinks } from '../../../services/theCockTailAPI';\n\nconst FoodProvider = ({ children }) => {\n  const [dataBase, setDataBase] = useState({ drinks: [], meals: [] });\n  const [mealsData, setMealsData] = useState([]);\n  const [drinksData, setDrinksData] = useState([]);\n  const [storage, setStorage] = useState([]);\n  const [dataByIngredients, setDataByIngredients] = useState([]);\n\n  const handleMealsSuccess = (response) => {\n    const { meals } = response;\n    setMealsData(meals);\n    setDataBase((currentState) => ({ ...currentState, meals }));\n  };\n  const fetch12Meals = () => {\n    fetchMeals()\n      .then(handleMealsSuccess, (e) => e);\n  };\n  const handleDrinksSuccess = (response) => {\n    const { drinks } = response;\n    setDrinksData(drinks);\n    setDataBase((currentState) => ({ ...currentState, drinks }));\n  };\n  const fetch12Drinks = () => {\n    fetchDrinks()\n      .then(handleDrinksSuccess, (e) => e);\n  };\n  const context = {\n    get12Meals: fetch12Meals,\n    get12Drinks: fetch12Drinks,\n    mealsData,\n    drinksData,\n    dataByIngredients,\n    setMealsData,\n    setDrinksData,\n    setDataByIngredients,\n    storage,\n    setStorage,\n    dataBase,\n  };\n  return (\n    <FoodContext.Provider value={context}>\n      {children}\n    </FoodContext.Provider>\n  );\n};\n\nFoodProvider.propTypes = { children: PropTypes.node.isRequired };\n\nexport default FoodProvider;\n"]},"metadata":{},"sourceType":"module"}