{"ast":null,"code":"var _jsxFileName = \"/home/jafet/projetos/sd-03-recipes-app-03/src/pages/RecipesInProgress/RecipesInProgressPage/RecipesInProgressContent.js\";\nimport React, { useContext, useState, useEffect } from 'react'; // import { DetailsPageContext } from '../DetailsPage/DetailsPageProvider';\n\nimport { RecipeInProgressContext } from '../RecipeInProgressProvider';\nimport { fetchMealById } from '../../../services/theMealAPI';\nimport { fetchDrinkById } from '../../../services/theCockTailAPI';\nimport RecipesInProgressPage from './RecipesInProgressContent';\n\nconst RecipesInProgressContent = props => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const {\n    recipeData,\n    setRecipeDataFunc\n  } = useContext(RecipeInProgressContext);\n  console.log(props);\n  const {\n    location: {\n      pathname\n    },\n    match: {\n      params: {\n        id\n      }\n    }\n  } = props;\n\n  const apiRequestSucceedMeal = ({\n    meals\n  }) => {\n    setRecipeDataFunc(meals[0]);\n    return setIsLoading(false);\n  };\n\n  const apiRequestSucceedDrink = ({\n    drinks\n  }) => {\n    setRecipeDataFunc(drinks[0]);\n    return setIsLoading(false);\n  };\n\n  const apiRequestFailure = ({\n    message\n  }) => {\n    setErrorMessage(message);\n    setIsLoading(false);\n  };\n\n  useEffect(() => {\n    const apiRequestFunction = (callback, recipeId) => {\n      setIsLoading(true);\n\n      if (callback === fetchMealById) {\n        return callback(recipeId).then(apiRequestSucceedMeal, apiRequestFailure);\n      }\n\n      return callback(recipeId).then(apiRequestSucceedDrink, apiRequestFailure);\n    };\n\n    if (pathname.includes('/comidas')) {\n      apiRequestFunction(fetchMealById, id);\n    } else {\n      apiRequestFunction(fetchDrinkById, id);\n    }\n  }, [pathname]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(RecipesInProgressPage, {\n    renderControl: {\n      isLoading,\n      errorMessage\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default renderWithRouter(RecipesInProgressContent);","map":{"version":3,"sources":["/home/jafet/projetos/sd-03-recipes-app-03/src/pages/RecipesInProgress/RecipesInProgressPage/RecipesInProgressContent.js"],"names":["React","useContext","useState","useEffect","RecipeInProgressContext","fetchMealById","fetchDrinkById","RecipesInProgressPage","RecipesInProgressContent","props","isLoading","setIsLoading","errorMessage","setErrorMessage","recipeData","setRecipeDataFunc","console","log","location","pathname","match","params","id","apiRequestSucceedMeal","meals","apiRequestSucceedDrink","drinks","apiRequestFailure","message","apiRequestFunction","callback","recipeId","then","includes","renderWithRouter"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,EAAsCC,SAAtC,QAAuD,OAAvD,C,CACA;;AACA,SAASC,uBAAT,QAAwC,6BAAxC;AACA,SAASC,aAAT,QAA8B,8BAA9B;AACA,SAASC,cAAT,QAA+B,kCAA/B;AACA,OAAOC,qBAAP,MAAkC,4BAAlC;;AAEA,MAAMC,wBAAwB,GAAIC,KAAD,IAAW;AAC1C,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACU,YAAD,EAAeC,eAAf,IAAkCX,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM;AAAEY,IAAAA,UAAF;AAAcC,IAAAA;AAAd,MAAoCd,UAAU,CAACG,uBAAD,CAApD;AACAY,EAAAA,OAAO,CAACC,GAAR,CAAYR,KAAZ;AACA,QAAM;AAAES,IAAAA,QAAQ,EAAE;AAAEC,MAAAA;AAAF,KAAZ;AAA0BC,IAAAA,KAAK,EAAE;AAAEC,MAAAA,MAAM,EAAE;AAAEC,QAAAA;AAAF;AAAV;AAAjC,MAAwDb,KAA9D;;AAEA,QAAMc,qBAAqB,GAAG,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAe;AAC3CT,IAAAA,iBAAiB,CAACS,KAAK,CAAC,CAAD,CAAN,CAAjB;AACA,WAAOb,YAAY,CAAC,KAAD,CAAnB;AACD,GAHD;;AAKA,QAAMc,sBAAsB,GAAG,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAgB;AAC7CX,IAAAA,iBAAiB,CAACW,MAAM,CAAC,CAAD,CAAP,CAAjB;AACA,WAAOf,YAAY,CAAC,KAAD,CAAnB;AACD,GAHD;;AAKA,QAAMgB,iBAAiB,GAAG,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAiB;AACzCf,IAAAA,eAAe,CAACe,OAAD,CAAf;AACAjB,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GAHD;;AAKAR,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM0B,kBAAkB,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAwB;AACjDpB,MAAAA,YAAY,CAAC,IAAD,CAAZ;;AACA,UAAImB,QAAQ,KAAKzB,aAAjB,EAAgC;AAC9B,eAAOyB,QAAQ,CAACC,QAAD,CAAR,CAAmBC,IAAnB,CAAwBT,qBAAxB,EAA+CI,iBAA/C,CAAP;AACD;;AACD,aAAOG,QAAQ,CAACC,QAAD,CAAR,CAAmBC,IAAnB,CAAwBP,sBAAxB,EAAgDE,iBAAhD,CAAP;AACD,KAND;;AAOA,QAAIR,QAAQ,CAACc,QAAT,CAAkB,UAAlB,CAAJ,EAAmC;AACjCJ,MAAAA,kBAAkB,CAACxB,aAAD,EAAgBiB,EAAhB,CAAlB;AACD,KAFD,MAEO;AACLO,MAAAA,kBAAkB,CAACvB,cAAD,EAAiBgB,EAAjB,CAAlB;AACD;AACF,GAbQ,EAaN,CAACH,QAAD,CAbM,CAAT;AAeA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,qBAAD;AAAuB,IAAA,aAAa,EAAE;AAAET,MAAAA,SAAF;AAAaE,MAAAA;AAAb,KAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD,CA1CD;;AA4CA,eAAesB,gBAAgB,CAAC1B,wBAAD,CAA/B","sourcesContent":["import React, { useContext, useState, useEffect } from 'react';\n// import { DetailsPageContext } from '../DetailsPage/DetailsPageProvider';\nimport { RecipeInProgressContext } from '../RecipeInProgressProvider';\nimport { fetchMealById } from '../../../services/theMealAPI';\nimport { fetchDrinkById } from '../../../services/theCockTailAPI';\nimport RecipesInProgressPage from './RecipesInProgressContent';\n\nconst RecipesInProgressContent = (props) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const { recipeData, setRecipeDataFunc } = useContext(RecipeInProgressContext);\n  console.log(props);\n  const { location: { pathname }, match: { params: { id } } } = props;\n\n  const apiRequestSucceedMeal = ({ meals }) => {\n    setRecipeDataFunc(meals[0]);\n    return setIsLoading(false);\n  };\n\n  const apiRequestSucceedDrink = ({ drinks }) => {\n    setRecipeDataFunc(drinks[0]);\n    return setIsLoading(false);\n  };\n\n  const apiRequestFailure = ({ message }) => {\n    setErrorMessage(message);\n    setIsLoading(false);\n  };\n\n  useEffect(() => {\n    const apiRequestFunction = (callback, recipeId) => {\n      setIsLoading(true);\n      if (callback === fetchMealById) {\n        return callback(recipeId).then(apiRequestSucceedMeal, apiRequestFailure);\n      }\n      return callback(recipeId).then(apiRequestSucceedDrink, apiRequestFailure);\n    }\n    if (pathname.includes('/comidas')) {\n      apiRequestFunction(fetchMealById, id);\n    } else {\n      apiRequestFunction(fetchDrinkById, id);\n    }\n  }, [pathname])\n\n  return (\n    <div>\n      <RecipesInProgressPage renderControl={{ isLoading, errorMessage }} />\n    </div>\n  );\n};\n\nexport default renderWithRouter(RecipesInProgressContent);\n"]},"metadata":{},"sourceType":"module"}