{"ast":null,"code":"var _jsxFileName = \"/home/jafet/projetos/sd-03-recipes-app-03/src/pages/RecipesInProgress/RecipesInProgressPage/IngredientsCheckbox.js\";\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types'; // import { RecipeInProgressContext } from '../RecipeInProgressProvider';\n\nconst IngredientsCheckbox = props => {\n  const [textDecorationState, setTextDecorationState] = useState('');\n  const [checkState, setCheckState] = useState(false);\n  const {\n    ingredient,\n    index,\n    quantity,\n    id,\n    finishButton,\n    englishType\n  } = props;\n\n  const riskIngredient = () => {\n    if (textDecorationState === 'line-through') {\n      setCheckState(false);\n      return setTextDecorationState('');\n    }\n\n    setCheckState(true);\n    return setTextDecorationState('line-through');\n  };\n\n  const localStorageProgress = () => {\n    const inProgress = JSON.parse(localStorage.getItem('inProgressRecipes'));\n\n    if (inProgress[englishType][id].some(e => e === index)) {\n      const newArr = [...inProgress[englishType][id]];\n      const elementIndex = newArr.indexOf(index);\n      newArr.splice(elementIndex, 1);\n      const inProgressRecipes = { ...inProgress,\n        [englishType]: { ...inProgress[englishType],\n          [id]: newArr\n        }\n      };\n      return localStorage.setItem('inProgressRecipes', JSON.stringify(inProgressRecipes));\n    }\n\n    const inProgressRecipes = { ...inProgress,\n      [englishType]: { ...inProgress[englishType],\n        [id]: [...inProgress[englishType][id], index]\n      }\n    };\n    return localStorage.setItem('inProgressRecipes', JSON.stringify(inProgressRecipes));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    \"data-testid\": `${index}-ingredient-step`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    style: {\n      textDecoration: textDecorationState\n    },\n    htmlFor: ingredient,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"checkbox\",\n    checked: checkState,\n    onClick: () => {\n      riskIngredient();\n      localStorageProgress();\n      finishButton();\n    },\n    id: ingredient,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }), ingredient, \" - \", quantity));\n};\n\nexport default IngredientsCheckbox;\nIngredientsCheckbox.propTypes = {\n  ingredient: PropTypes.string.isRequired,\n  index: PropTypes.number.isRequired,\n  quantity: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  finishButton: PropTypes.func.isRequired,\n  englishType: PropTypes.string.isRequired\n};","map":{"version":3,"sources":["/home/jafet/projetos/sd-03-recipes-app-03/src/pages/RecipesInProgress/RecipesInProgressPage/IngredientsCheckbox.js"],"names":["React","useState","useEffect","PropTypes","IngredientsCheckbox","props","textDecorationState","setTextDecorationState","checkState","setCheckState","ingredient","index","quantity","id","finishButton","englishType","riskIngredient","localStorageProgress","inProgress","JSON","parse","localStorage","getItem","some","e","newArr","elementIndex","indexOf","splice","inProgressRecipes","setItem","stringify","textDecoration","propTypes","string","isRequired","number","func"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CACA;;AAGA,MAAMC,mBAAmB,GAAIC,KAAD,IAAW;AACrC,QAAM,CAACC,mBAAD,EAAsBC,sBAAtB,IAAgDN,QAAQ,CAAC,EAAD,CAA9D;AACA,QAAM,CAACO,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM;AAAES,IAAAA,UAAF;AAAcC,IAAAA,KAAd;AAAqBC,IAAAA,QAArB;AAA+BC,IAAAA,EAA/B;AAAmCC,IAAAA,YAAnC;AAAiDC,IAAAA;AAAjD,MAAiEV,KAAvE;;AAEA,QAAMW,cAAc,GAAG,MAAM;AAC3B,QAAIV,mBAAmB,KAAK,cAA5B,EAA4C;AAC1CG,MAAAA,aAAa,CAAC,KAAD,CAAb;AACA,aAAOF,sBAAsB,CAAC,EAAD,CAA7B;AACD;;AACDE,IAAAA,aAAa,CAAC,IAAD,CAAb;AACA,WAAOF,sBAAsB,CAAC,cAAD,CAA7B;AACD,GAPD;;AASA,QAAMU,oBAAoB,GAAG,MAAM;AACjC,UAAMC,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,mBAArB,CAAX,CAAnB;;AACA,QAAIJ,UAAU,CAACH,WAAD,CAAV,CAAwBF,EAAxB,EAA4BU,IAA5B,CAAkCC,CAAD,IAAOA,CAAC,KAAKb,KAA9C,CAAJ,EAA0D;AACxD,YAAMc,MAAM,GAAG,CAAC,GAAGP,UAAU,CAACH,WAAD,CAAV,CAAwBF,EAAxB,CAAJ,CAAf;AACA,YAAMa,YAAY,GAAGD,MAAM,CAACE,OAAP,CAAehB,KAAf,CAArB;AACAc,MAAAA,MAAM,CAACG,MAAP,CAAcF,YAAd,EAA4B,CAA5B;AACA,YAAMG,iBAAiB,GAAG,EACxB,GAAGX,UADqB;AAExB,SAACH,WAAD,GAAe,EAAE,GAAGG,UAAU,CAACH,WAAD,CAAf;AAA8B,WAACF,EAAD,GAAMY;AAApC;AAFS,OAA1B;AAIA,aAAOJ,YAAY,CAACS,OAAb,CAAqB,mBAArB,EAA0CX,IAAI,CAACY,SAAL,CAAeF,iBAAf,CAA1C,CAAP;AACD;;AACD,UAAMA,iBAAiB,GAAG,EACxB,GAAGX,UADqB;AAExB,OAACH,WAAD,GAAe,EAAE,GAAGG,UAAU,CAACH,WAAD,CAAf;AAA8B,SAACF,EAAD,GAAM,CAAC,GAAGK,UAAU,CAACH,WAAD,CAAV,CAAwBF,EAAxB,CAAJ,EAAiCF,KAAjC;AAApC;AAFS,KAA1B;AAIA,WAAOU,YAAY,CAACS,OAAb,CAAqB,mBAArB,EAA0CX,IAAI,CAACY,SAAL,CAAeF,iBAAf,CAA1C,CAAP;AACD,GAjBD;;AAkBA,sBACE;AAAK,mBAAc,GAAElB,KAAM,kBAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAO,IAAA,KAAK,EAAE;AAAEqB,MAAAA,cAAc,EAAE1B;AAAlB,KAAd;AAAuD,IAAA,OAAO,EAAEI,UAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,IAAI,EAAC,UADP;AAEE,IAAA,OAAO,EAAEF,UAFX;AAGE,IAAA,OAAO,EAAE,MAAM;AACbQ,MAAAA,cAAc;AACdC,MAAAA,oBAAoB;AACpBH,MAAAA,YAAY;AACb,KAPH;AAQE,IAAA,EAAE,EAAEJ,UARN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAWGA,UAXH,SAWkBE,QAXlB,CADF,CADF;AAiBD,CAjDD;;AAmDA,eAAeR,mBAAf;AAEAA,mBAAmB,CAAC6B,SAApB,GAAgC;AAC9BvB,EAAAA,UAAU,EAAEP,SAAS,CAAC+B,MAAV,CAAiBC,UADC;AAE9BxB,EAAAA,KAAK,EAAER,SAAS,CAACiC,MAAV,CAAiBD,UAFM;AAG9BvB,EAAAA,QAAQ,EAAET,SAAS,CAAC+B,MAAV,CAAiBC,UAHG;AAI9BtB,EAAAA,EAAE,EAAEV,SAAS,CAAC+B,MAAV,CAAiBC,UAJS;AAK9BrB,EAAAA,YAAY,EAAEX,SAAS,CAACkC,IAAV,CAAeF,UALC;AAM9BpB,EAAAA,WAAW,EAAEZ,SAAS,CAAC+B,MAAV,CAAiBC;AANA,CAAhC","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n// import { RecipeInProgressContext } from '../RecipeInProgressProvider';\n\n\nconst IngredientsCheckbox = (props) => {\n  const [textDecorationState, setTextDecorationState] = useState('');\n  const [checkState, setCheckState] = useState(false);\n  const { ingredient, index, quantity, id, finishButton, englishType } = props;\n\n  const riskIngredient = () => {\n    if (textDecorationState === 'line-through') {\n      setCheckState(false)\n      return setTextDecorationState('');\n    }\n    setCheckState(true)\n    return setTextDecorationState('line-through');\n  };\n\n  const localStorageProgress = () => {\n    const inProgress = JSON.parse(localStorage.getItem('inProgressRecipes'));\n    if (inProgress[englishType][id].some((e) => e === index)) {\n      const newArr = [...inProgress[englishType][id]];\n      const elementIndex = newArr.indexOf(index);\n      newArr.splice(elementIndex, 1);\n      const inProgressRecipes = {\n        ...inProgress,\n        [englishType]: { ...inProgress[englishType], [id]: newArr },\n      };\n      return localStorage.setItem('inProgressRecipes', JSON.stringify(inProgressRecipes));\n    }\n    const inProgressRecipes = {\n      ...inProgress,\n      [englishType]: { ...inProgress[englishType], [id]: [...inProgress[englishType][id], index] },\n    };\n    return localStorage.setItem('inProgressRecipes', JSON.stringify(inProgressRecipes));\n  };\n  return (\n    <div data-testid={`${index}-ingredient-step`}>\n      <label style={{ textDecoration: textDecorationState }} htmlFor={ingredient}>\n        <input\n          type=\"checkbox\"\n          checked={checkState}\n          onClick={() => {\n            riskIngredient();\n            localStorageProgress();\n            finishButton();\n          }}\n          id={ingredient}\n        />\n        {ingredient} - {quantity}\n      </label>\n    </div>\n  );\n};\n\nexport default IngredientsCheckbox;\n\nIngredientsCheckbox.propTypes = {\n  ingredient: PropTypes.string.isRequired,\n  index: PropTypes.number.isRequired,\n  quantity: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  finishButton: PropTypes.func.isRequired,\n  englishType: PropTypes.string.isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}