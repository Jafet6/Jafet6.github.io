{"ast":null,"code":"var _jsxFileName = \"/home/jafet/projetos/sd-03-recipes-app-03/src/pages/RecipesInProgress/RecipesInProgressPage/IngredientsCheckbox.js\";\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types'; // import { RecipeInProgressContext } from '../RecipeInProgressProvider';\n\nconst riskIngredient = (textDecoration, setTextDecoration) => {\n  if (textDecoration === 'line-through') {\n    return setTextDecoration('');\n  }\n\n  return setTextDecoration('line-through');\n};\n\nconst IngredientsCheckbox = props => {\n  const [textDecorationState, setTextDecorationState] = useState('');\n  const {\n    ingredient,\n    index,\n    quantity,\n    id,\n    finishButton,\n    englishType\n  } = props;\n\n  const localStorageProgress = () => {\n    const inProgress = JSON.parse(localStorage.getItem('inProgressRecipes'));\n\n    if (inProgress[englishType][id].some(e => e === index)) {\n      const newArr = [...inProgress[englishType][id]];\n      const elementIndex = newArr.indexOf(index);\n      newArr.splice(elementIndex, 1);\n      const inProgressRecipes = { ...inProgress,\n        [englishType]: { ...inProgress[englishType],\n          [id]: newArr\n        }\n      };\n      return localStorage.setItem('inProgressRecipes', JSON.stringify(inProgressRecipes));\n    }\n\n    const inProgressRecipes = { ...inProgress,\n      [englishType]: { ...inProgress[englishType],\n        [id]: [...inProgress[englishType][id], index]\n      }\n    };\n    return localStorage.setItem('inProgressRecipes', JSON.stringify(inProgressRecipes));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    key: ingredient + quantity,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    style: {\n      textDecoration: textDecorationState\n    },\n    htmlFor: ingredient,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    \"data-testid\": `${index}-ingredient-step`,\n    onClick: () => {\n      riskIngredient(textDecorationState, setTextDecorationState);\n      localStorageProgress();\n      finishButton();\n    },\n    type: \"checkbox\",\n    id: ingredient,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 11\n    }\n  }), ingredient, \" - \", quantity)));\n};\n\nexport default IngredientsCheckbox;\nIngredientsCheckbox.propTypes = {\n  ingredient: PropTypes.string.isRequired,\n  index: PropTypes.number.isRequired,\n  quantity: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  finishButton: PropTypes.func.isRequired,\n  englishType: PropTypes.string.isRequired\n};","map":{"version":3,"sources":["/home/jafet/projetos/sd-03-recipes-app-03/src/pages/RecipesInProgress/RecipesInProgressPage/IngredientsCheckbox.js"],"names":["React","useState","PropTypes","riskIngredient","textDecoration","setTextDecoration","IngredientsCheckbox","props","textDecorationState","setTextDecorationState","ingredient","index","quantity","id","finishButton","englishType","localStorageProgress","inProgress","JSON","parse","localStorage","getItem","some","e","newArr","elementIndex","indexOf","splice","inProgressRecipes","setItem","stringify","propTypes","string","isRequired","number","func"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n// import { RecipeInProgressContext } from '../RecipeInProgressProvider';\n\nconst riskIngredient = (textDecoration, setTextDecoration) => {\n  if (textDecoration === 'line-through') {\n    return setTextDecoration('');\n  }\n  return setTextDecoration('line-through');\n};\n\nconst IngredientsCheckbox = (props) => {\n  const [textDecorationState, setTextDecorationState] = useState('');\n  const { ingredient, index, quantity, id, finishButton, englishType } = props;\n  const localStorageProgress = () => {\n    const inProgress = JSON.parse(localStorage.getItem('inProgressRecipes'));\n    if (inProgress[englishType][id].some((e) => e === index)) {\n      const newArr = [...inProgress[englishType][id]];\n      const elementIndex = newArr.indexOf(index);\n      newArr.splice(elementIndex, 1);\n      const inProgressRecipes = {\n        ...inProgress,\n        [englishType]: {\n          ...inProgress[englishType],\n          [id]: newArr,\n        },\n      };\n      return localStorage.setItem('inProgressRecipes', JSON.stringify(inProgressRecipes));\n    }\n    const inProgressRecipes = {\n      ...inProgress,\n      [englishType]: {\n        ...inProgress[englishType],\n        [id]: [...inProgress[englishType][id], index],\n      },\n    };\n    return localStorage.setItem('inProgressRecipes', JSON.stringify(inProgressRecipes));\n  };\n  return (\n    <div>\n      <div key={ingredient + quantity}>\n        <label style={{ textDecoration: textDecorationState }} htmlFor={ingredient}>\n          <input\n            data-testid={`${index}-ingredient-step`}\n            onClick={() => {\n              riskIngredient(textDecorationState, setTextDecorationState);\n              localStorageProgress();\n              finishButton();\n            }}\n            type=\"checkbox\"\n            id={ingredient}\n          />\n          {ingredient} - {quantity}\n        </label>\n      </div>\n    </div>\n  );\n};\n\nexport default IngredientsCheckbox;\n\nIngredientsCheckbox.propTypes = {\n  ingredient: PropTypes.string.isRequired,\n  index: PropTypes.number.isRequired,\n  quantity: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  finishButton: PropTypes.func.isRequired,\n  englishType: PropTypes.string.isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}