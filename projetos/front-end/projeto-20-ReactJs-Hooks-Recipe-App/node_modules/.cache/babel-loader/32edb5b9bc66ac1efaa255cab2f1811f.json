{"ast":null,"code":"var _jsxFileName = \"/home/jafet/projetos/sd-03-recipes-app-03/src/pages/RecipesInProgress/RecipesInProgressPage/RecipesInProgressContent.js\";\nimport React, { useContext, useState, useEffect } from 'react'; // import PropTypes from 'prop-types';\n// import { DetailsPageContext } from '../DetailsPage/DetailsPageProvider';\n\nimport { useLocation, useParams } from 'react-router-dom';\nimport { RecipeInProgressContext } from '../RecipeInProgressProvider';\nimport { fetchMealById } from '../../../services/theMealAPI';\nimport { fetchDrinkById } from '../../../services/theCockTailAPI';\nimport RecipesInProgressPage from './RecipesInProgressPage';\n\nconst createLocalStorage = () => {\n  const inProgressRecipes = {\n    cocktails: {},\n    meals: {}\n  };\n  localStorage.setItem('inProgressRecipes', JSON.stringify(inProgressRecipes));\n};\n\nconst RecipesInProgressContent = () => {\n  const {\n    setRecipeDataFunc\n  } = useContext(RecipeInProgressContext);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const {\n    pathname\n  } = useLocation();\n  const {\n    id\n  } = useParams();\n\n  const apiRequestSucceedMeal = ({\n    meals\n  }) => {\n    setRecipeDataFunc(meals[0]);\n    return setIsLoading(false);\n  };\n\n  const apiRequestSucceedDrink = ({\n    drinks\n  }) => {\n    setRecipeDataFunc(drinks[0]);\n    return setIsLoading(false);\n  };\n\n  const apiRequestFailure = ({\n    message\n  }) => {\n    setErrorMessage(message);\n    setIsLoading(false);\n  };\n\n  useEffect(() => {\n    const apiRequestFunction = (callback, recipeId) => {\n      setIsLoading(true);\n\n      if (callback === fetchMealById) {\n        return callback(recipeId).then(apiRequestSucceedMeal, apiRequestFailure);\n      }\n\n      return callback(recipeId).then(apiRequestSucceedDrink, apiRequestFailure);\n    };\n\n    if (pathname.includes('/comidas')) {\n      apiRequestFunction(fetchMealById, id);\n    } else {\n      apiRequestFunction(fetchDrinkById, id);\n    }\n  }, [pathname]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(RecipesInProgressPage, {\n    renderControl: {\n      isLoading,\n      errorMessage\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default RecipesInProgressContent; // RecipesInProgressContent.propTypes = {\n// };","map":{"version":3,"sources":["/home/jafet/projetos/sd-03-recipes-app-03/src/pages/RecipesInProgress/RecipesInProgressPage/RecipesInProgressContent.js"],"names":["React","useContext","useState","useEffect","useLocation","useParams","RecipeInProgressContext","fetchMealById","fetchDrinkById","RecipesInProgressPage","createLocalStorage","inProgressRecipes","cocktails","meals","localStorage","setItem","JSON","stringify","RecipesInProgressContent","setRecipeDataFunc","errorMessage","setErrorMessage","isLoading","setIsLoading","pathname","id","apiRequestSucceedMeal","apiRequestSucceedDrink","drinks","apiRequestFailure","message","apiRequestFunction","callback","recipeId","then","includes"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,EAAsCC,SAAtC,QAAuD,OAAvD,C,CACA;AACA;;AACA,SAASC,WAAT,EAAsBC,SAAtB,QAAuC,kBAAvC;AACA,SAASC,uBAAT,QAAwC,6BAAxC;AACA,SAASC,aAAT,QAA8B,8BAA9B;AACA,SAASC,cAAT,QAA+B,kCAA/B;AACA,OAAOC,qBAAP,MAAkC,yBAAlC;;AAEA,MAAMC,kBAAkB,GAAG,MAAM;AAC/B,QAAMC,iBAAiB,GAAG;AAAEC,IAAAA,SAAS,EAAE,EAAb;AAAiBC,IAAAA,KAAK,EAAE;AAAxB,GAA1B;AACAC,EAAAA,YAAY,CAACC,OAAb,CAAqB,mBAArB,EAA0CC,IAAI,CAACC,SAAL,CAAeN,iBAAf,CAA1C;AACD,CAHD;;AAKA,MAAMO,wBAAwB,GAAG,MAAM;AACrC,QAAM;AAAEC,IAAAA;AAAF,MAAwBlB,UAAU,CAACK,uBAAD,CAAxC;AACA,QAAM,CAACc,YAAD,EAAeC,eAAf,IAAkCnB,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACoB,SAAD,EAAYC,YAAZ,IAA4BrB,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM;AAAEsB,IAAAA;AAAF,MAAepB,WAAW,EAAhC;AACA,QAAM;AAAEqB,IAAAA;AAAF,MAASpB,SAAS,EAAxB;;AAEA,QAAMqB,qBAAqB,GAAG,CAAC;AAAEb,IAAAA;AAAF,GAAD,KAAe;AAC3CM,IAAAA,iBAAiB,CAACN,KAAK,CAAC,CAAD,CAAN,CAAjB;AACA,WAAOU,YAAY,CAAC,KAAD,CAAnB;AACD,GAHD;;AAKA,QAAMI,sBAAsB,GAAG,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAgB;AAC7CT,IAAAA,iBAAiB,CAACS,MAAM,CAAC,CAAD,CAAP,CAAjB;AACA,WAAOL,YAAY,CAAC,KAAD,CAAnB;AACD,GAHD;;AAKA,QAAMM,iBAAiB,GAAG,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAiB;AACzCT,IAAAA,eAAe,CAACS,OAAD,CAAf;AACAP,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GAHD;;AAKApB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM4B,kBAAkB,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAwB;AACjDV,MAAAA,YAAY,CAAC,IAAD,CAAZ;;AACA,UAAIS,QAAQ,KAAKzB,aAAjB,EAAgC;AAC9B,eAAOyB,QAAQ,CAACC,QAAD,CAAR,CAAmBC,IAAnB,CAAwBR,qBAAxB,EAA+CG,iBAA/C,CAAP;AACD;;AACD,aAAOG,QAAQ,CAACC,QAAD,CAAR,CAAmBC,IAAnB,CAAwBP,sBAAxB,EAAgDE,iBAAhD,CAAP;AACD,KAND;;AAOA,QAAIL,QAAQ,CAACW,QAAT,CAAkB,UAAlB,CAAJ,EAAmC;AACjCJ,MAAAA,kBAAkB,CAACxB,aAAD,EAAgBkB,EAAhB,CAAlB;AACD,KAFD,MAEO;AACLM,MAAAA,kBAAkB,CAACvB,cAAD,EAAiBiB,EAAjB,CAAlB;AACD;AACF,GAbQ,EAaN,CAACD,QAAD,CAbM,CAAT;AAeA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,qBAAD;AAAuB,IAAA,aAAa,EAAE;AAAEF,MAAAA,SAAF;AAAaF,MAAAA;AAAb,KAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD,CA1CD;;AA4CA,eAAeF,wBAAf,C,CAEA;AAEA","sourcesContent":["import React, { useContext, useState, useEffect } from 'react';\n// import PropTypes from 'prop-types';\n// import { DetailsPageContext } from '../DetailsPage/DetailsPageProvider';\nimport { useLocation, useParams } from 'react-router-dom';\nimport { RecipeInProgressContext } from '../RecipeInProgressProvider';\nimport { fetchMealById } from '../../../services/theMealAPI';\nimport { fetchDrinkById } from '../../../services/theCockTailAPI';\nimport RecipesInProgressPage from './RecipesInProgressPage';\n\nconst createLocalStorage = () => {\n  const inProgressRecipes = { cocktails: {}, meals: {} }\n  localStorage.setItem('inProgressRecipes', JSON.stringify(inProgressRecipes))\n}\n\nconst RecipesInProgressContent = () => {\n  const { setRecipeDataFunc } = useContext(RecipeInProgressContext);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const { pathname } = useLocation();\n  const { id } = useParams();\n\n  const apiRequestSucceedMeal = ({ meals }) => {\n    setRecipeDataFunc(meals[0]);\n    return setIsLoading(false);\n  };\n\n  const apiRequestSucceedDrink = ({ drinks }) => {\n    setRecipeDataFunc(drinks[0]);\n    return setIsLoading(false);\n  };\n\n  const apiRequestFailure = ({ message }) => {\n    setErrorMessage(message);\n    setIsLoading(false);\n  };\n\n  useEffect(() => {\n    const apiRequestFunction = (callback, recipeId) => {\n      setIsLoading(true);\n      if (callback === fetchMealById) {\n        return callback(recipeId).then(apiRequestSucceedMeal, apiRequestFailure);\n      }\n      return callback(recipeId).then(apiRequestSucceedDrink, apiRequestFailure);\n    };\n    if (pathname.includes('/comidas')) {\n      apiRequestFunction(fetchMealById, id);\n    } else {\n      apiRequestFunction(fetchDrinkById, id);\n    }\n  }, [pathname]);\n\n  return (\n    <div>\n      <RecipesInProgressPage renderControl={{ isLoading, errorMessage }} />\n    </div>\n  );\n};\n\nexport default RecipesInProgressContent;\n\n// RecipesInProgressContent.propTypes = {\n\n// };\n"]},"metadata":{},"sourceType":"module"}