{"ast":null,"code":"var _jsxFileName = \"/home/jafet/projetos/sd-03-recipes-app-03/src/pages/DoneRecipes/DoneRecipesList.js\";\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { fetchCategoriesMeals } from '../../services/theMealAPI';\nimport { fetchCategoriesDrinks } from '../../services/theCockTailAPI';\nimport ListCategories from '../../components/Categories/ListCategories';\nimport DoneRecipeCard from '../../components/DoneRecipeCard';\nimport './style.css';\nimport '../../components/Categories/ListCategories.css';\nimport destructureAPI from '../../untils/destructureObject';\n\nconst recipeModal = recipe => ({ ...recipe,\n  img: recipe.image,\n  alcoholic: recipe.alcoholicOrNot\n});\n\nconst renderCategories = (setFilteredRecipes, recipes) => {\n  const categories = [{\n    all: 'todos'\n  }, {\n    food: 'comidas'\n  }, {\n    drink: 'bebidas'\n  }];\n\n  const filterRecipes = value => {\n    if (value === 'todos') return recipes;\n    return recipes.filter(recipe => recipe.type.includes(value));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"categories\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }, categories.map(category => /*#__PURE__*/React.createElement(\"button\", {\n    className: \"categoryBtn\",\n    \"data-testid\": `filter-by-${Object.keys(category)}-btn`,\n    onClick: () => setFilteredRecipes(filterRecipes(Object.values(category)[0])),\n    key: Object.values(category),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }\n  }, Object.keys(category))));\n};\n\nconst DoneRecipeList = ({\n  recipes,\n  type\n}) => {\n  const [categories, setCategories] = useState({\n    recipes: []\n  });\n  const [doneRecipes, setDoneRecipes] = useState(false);\n  const [filteredRecipes, setFilteredRecipes] = useState([]);\n  useEffect(() => {\n    if (type === 'doneRecipes') {\n      setDoneRecipes(true);\n    }\n\n    if (type === 'meal') {\n      fetchCategoriesMeals().then(resp => setCategories({\n        recipes: resp.meals\n      }), resp => resp);\n    }\n\n    if (type === 'drink') {\n      fetchCategoriesDrinks().then(resp => setCategories({\n        recipes: resp.drinks\n      }), resp => resp);\n    }\n  }, []);\n  useEffect(() => {\n    setFilteredRecipes(recipes);\n  }, [recipes]);\n  return /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, !doneRecipes && /*#__PURE__*/React.createElement(ListCategories, {\n    strCategories: [{\n      strCategory: 'All'\n    }, ...categories.recipes],\n    type: type,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }), doneRecipes && renderCategories(setFilteredRecipes, recipes), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"foodList\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, !doneRecipes && recipes.slice(0, 12).map((recipe, index) => /*#__PURE__*/React.createElement(DoneRecipeCard, {\n    key: Object.values(recipe)[0],\n    recipe: destructureAPI(recipe),\n    index: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }\n  })), doneRecipes && filteredRecipes.map((recipe, index) => /*#__PURE__*/React.createElement(DoneRecipeCard, {\n    doneRecipes: \"disabled-link\",\n    key: Object.values(recipe)[0],\n    recipe: recipeModal(recipe),\n    index: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }\n  }))));\n};\n\nDoneRecipeList.propTypes = {\n  recipes: PropTypes.arrayOf(PropTypes.object.isRequired).isRequired,\n  type: PropTypes.string.isRequired\n};\nexport default DoneRecipeList;","map":{"version":3,"sources":["/home/jafet/projetos/sd-03-recipes-app-03/src/pages/DoneRecipes/DoneRecipesList.js"],"names":["React","useEffect","useState","PropTypes","fetchCategoriesMeals","fetchCategoriesDrinks","ListCategories","DoneRecipeCard","destructureAPI","recipeModal","recipe","img","image","alcoholic","alcoholicOrNot","renderCategories","setFilteredRecipes","recipes","categories","all","food","drink","filterRecipes","value","filter","type","includes","map","category","Object","keys","values","DoneRecipeList","setCategories","doneRecipes","setDoneRecipes","filteredRecipes","then","resp","meals","drinks","strCategory","slice","index","propTypes","arrayOf","object","isRequired","string"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { fetchCategoriesMeals } from '../../services/theMealAPI';\nimport { fetchCategoriesDrinks } from '../../services/theCockTailAPI';\nimport ListCategories from '../../components/Categories/ListCategories';\nimport DoneRecipeCard from '../../components/DoneRecipeCard';\nimport './style.css';\nimport '../../components/Categories/ListCategories.css';\nimport destructureAPI from '../../untils/destructureObject';\n\nconst recipeModal = (recipe) => ({\n  ...recipe,\n  img: recipe.image,\n  alcoholic: recipe.alcoholicOrNot,\n});\n\nconst renderCategories = (setFilteredRecipes, recipes) => {\n  const categories = [{ all: 'todos' }, { food: 'comidas' }, { drink: 'bebidas' }];\n  const filterRecipes = (value) => {\n    if (value === 'todos') return recipes;\n    return recipes.filter((recipe) => recipe.type.includes(value));\n  };\n  return (\n    <div className=\"categories\">\n      {categories.map((category) => (\n        <button\n          className=\"categoryBtn\"\n          data-testid={`filter-by-${Object.keys(category)}-btn`}\n          onClick={() => setFilteredRecipes(filterRecipes(Object.values(category)[0]))}\n          key={Object.values(category)}\n        >\n          {Object.keys(category)}\n        </button>\n      ))}\n    </div>\n  );\n};\n\nconst DoneRecipeList = ({ recipes, type }) => {\n  const [categories, setCategories] = useState({ recipes: [] });\n  const [doneRecipes, setDoneRecipes] = useState(false);\n  const [filteredRecipes, setFilteredRecipes] = useState([]);\n  useEffect(() => {\n    if (type === 'doneRecipes') {\n      setDoneRecipes(true);\n    }\n    if (type === 'meal') {\n      fetchCategoriesMeals()\n        .then((resp) => setCategories({ recipes: resp.meals }), (resp) => resp);\n    }\n    if (type === 'drink') {\n      fetchCategoriesDrinks()\n      .then((resp) => setCategories({ recipes: resp.drinks }), (resp) => resp);\n    }\n  }, []);\n  useEffect(() => {\n    setFilteredRecipes(recipes);\n  }, [recipes]);\n  return (\n    <section>\n      {!doneRecipes &&\n        <ListCategories\n          strCategories={[{ strCategory: 'All' }, ...categories.recipes]}\n          type={type}\n        />\n      }\n      {doneRecipes && renderCategories(setFilteredRecipes, recipes)}\n      <div className=\"foodList\">\n        {!doneRecipes && recipes.slice(0, 12).map((recipe, index) => (\n          <DoneRecipeCard\n            key={Object.values(recipe)[0]}\n            recipe={destructureAPI(recipe)}\n            index={index}\n          />\n        ))}\n        {doneRecipes && filteredRecipes.map((recipe, index) => (\n          <DoneRecipeCard\n            doneRecipes=\"disabled-link\"\n            key={Object.values(recipe)[0]}\n            recipe={recipeModal(recipe)}\n            index={index}\n          />\n        ))}\n      </div>\n    </section>\n  );\n};\n\nDoneRecipeList.propTypes = {\n  recipes: PropTypes.arrayOf(PropTypes.object.isRequired).isRequired,\n  type: PropTypes.string.isRequired,\n};\n\nexport default DoneRecipeList;\n"]},"metadata":{},"sourceType":"module"}